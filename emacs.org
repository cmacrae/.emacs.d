* About
My literate Emacs configuration, embedded using [[http://orgmode.org/][org-mode]].
It's necessary to clone the latest ~org-mode~ into a directory named ~src/org-mode~ for this configuration to work:
#+begin_example
$ cd ~/.emacs.d
$ mkdir src
$ git clone git://orgmode.org/org-mode.git src/org-mode
#+end_example

It's also important to note that this configuration makes heavy use of the brilliant [[https://github.com/jwiegley/use-package][use-package]].
See ~init.el~ for the ~use-package~ bootstrapping code.
* General
*** Personal stuff
#+begin_src emacs-lisp
(setq user-full-name "Calum MacRae"
      user-mail-address "calum0macrae@gmail.com")
#+end_src

*** Global ~:ensure~ for ~use-package~ statements
#+begin_src emacs-lisp
(setq use-package-always-ensure t)
#+end_src

*** Custom elisp file (don't really use this, just dump stuff here)
#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
#+end_src

*** Just use 'y' or 'n' instead of 'yes' or 'no'
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

*** Set the scratch buffer string
#+begin_src emacs-lisp
(setq initial-scratch-message (format ";; Scratch buffer - started on %s\n\n" (current-time-string)))
#+end_src

*** Turn on ~global-flycheck-mode~ & ~smartparens-global-mode~ after init
#+begin_src emacs-lisp
(use-package flycheck-pos-tip)
(use-package flycheck
  :init
  (add-hook 'after-init-hook #'global-flycheck-mode)
  :config
  (flycheck-pos-tip-mode))
(use-package smartparens
  :init
  (add-hook 'after-init-hook #'smartparens-global-mode))
#+end_src

*** Start the server
#+begin_src emacs-lisp
(server-start)
#+end_src

*** ido settings
#+begin_src emacs-lisp
(use-package ido
  :ensure nil
  :config
  (ido-mode t))
#+end_src

*** winner-mode
#+begin_src emacs-lisp
(use-package winner
  :ensure nil
  :bind
  ("C-c u" . winner-undo)
  ("C-c r" . winner-redo)
  :config
  (winner-mode 1))
#+end_src

*** Follow symlinks in version control
#+begin_src emacs-lisp
(setq vc-follow-symlinks t)
#+end_src

*** Use 'root' user by default for SSH connections using TRAMP
#+begin_src emacs-lisp
(set-default 'tramp-default-proxies-alist (quote ((".*" "\\`root\\'" "/ssh:%h:"))))
#+end_src

*** Set explicit shell binary
#+begin_src emacs-lisp
(setq explicit-shell-file-name "/bin/zsh")
#+end_src

*** Use M-3 to insert an octothorp
#+begin_src emacs-lisp
(global-set-key (kbd "M-3") '(lambda () (interactive) (insert "#")))
#+end_src

*** Ace window
#+begin_src emacs-lisp
(use-package ace-window
  :bind ("M-p" . ace-window)
  :config
  (setq aw-dispatch-always t)
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src

*** ~erc-hl-nicks~
#+begin_src emacs-lisp
(use-package erc-hl-nicks)
#+end_src

*** ~diff-hl~
#+begin_src emacs-lisp
(use-package diff-hl
  :init
  ;; Better looking colours for diff indicators /w spacemacs-light theme
  (custom-set-faces
   '(diff-hl-change ((t (:background "#83A598"))))
   '(diff-hl-insert ((t (:background "#84BB26"))))
   '(diff-hl-delete ((t (:background "#FB4933")))))
  ;; On-the-fly diff updates
  (diff-hl-flydiff-mode)
  ;; Enable diff-hl globally
  (global-diff-hl-mode 1))
#+end_src

*** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :init
  (setq projectile-completion-system 'ivy)
  (setq projectile-switch-project-action 'neotree-projectile-action)
  :config
  (projectile-global-mode))
#+end_src

*** NeoTree
#+begin_src emacs-lisp
(use-package neotree
  :bind ("C-;" . neotree-toggle)
  :config
  (custom-set-faces
   '(neo-header-face ((t (:foreground "#7C6F64"))))
   '(neo-file-link-face ((t (:foreground "#FDF4C1"))))
   '(neo-dir-link-face ((t (:foreground "#528B8B"))))
   '(neo-root-dir-face ((t (:foreground "#BBAA97")))))
  (setq neo-theme (if window-system 'icons 'arrows)))
#+end_src

*** Popwin
#+begin_src emacs-lisp
(use-package popwin
  :bind-keymap ("C-z" . popwin:keymap)
  :config
  (popwin-mode 1)
  (push '(term-mode :position :top :height 16 :stick t) popwin:special-display-config)
  (push '(" *grep*" :height 30 :position bottom) popwin:special-display-config))
#+end_src

*** Custom ~popwin-term~ function
#+begin_src emacs-lisp
(defun popwin-term:term ()
  (interactive)
  (popwin:display-buffer-1
   (or (get-buffer "*terminal*")
       (save-window-excursion
         (call-interactively 'term)))
   :default-config-keywords '(:position :top)))

(provide 'popwin-term)

(use-package popwin-term
  :ensure nil
  :bind ("C-x t" . popwin-term:term))
#+end_src

*** Kill term buffers upon exit
#+begin_src emacs-lisp
(defadvice term-handle-exit
  (after term-kill-buffer-on-exit activate)
(kill-buffer))
#+end_src

*** Activate ~ansible-doc~ when loading YAML files (bind to ~C-c h a~)
#+begin_src emacs-lisp
(use-package ansible-doc)
(use-package yaml-mode
  :bind (:map yaml-mode-map
    ("C-c h a" . ansible-doc)))
#+end_src

*** Calendar/Diary
#+begin_src emacs-lisp
(setq calendar-week-start-day 1)
(setq diary-file "~/org/diary")
(add-hook 'diary-list-entries-hook 'diary-sort-entries t)
#+end_src

*** Multiple-cursors
#+begin_src emacs-lisp
(use-package multiple-cursors
  :bind
  ("C-S-c C-S-c" . mc/edit-lines)
  ("C->" . mc/mark-next-like-this)
  ("C-<" . mc/mark-previous-like-this)
  ("C-c C->" . mc/mark-all-like-this))
#+end_src

*** Openwith
#+begin_src emacs-lisp
(use-package openwith
  :config
  (openwith-mode t)
  (setq openwith-associations '(("\\.avi\\'" "/Applications/mpv.app/Contents/MacOS/mpv" (file))
  			       ("\\.mkv\\'" "/Applications/mpv.app/Contents/MacOS/mpv" (file))
  			       ("\\.mp4\\'" "/Applications/mpv.app/Contents/MacOS/mpv" (file))
  			       ("\\.pdf\\'" "/Applications/Preview.app/Contents/MacOS/Preview" (file)))))
#+end_src

*** Set exec/man PATH from shell
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :config
  (exec-path-from-shell-initialize))
#+end_src

*** Magit
#+begin_src emacs-lisp
(use-package magit
  :bind ("C-c m" . magit-status)
  :init
  (setq magit-completing-read-function 'ivy-completing-read)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)) ;; Ensure live diff previews are updated after ~magit~ action
#+end_src

*** GitHub integration
#+begin_src emacs-lisp
(use-package magit-gh-pulls
  :bind (:map magit-gh-pulls-mode-map
  ("Â£" . magit-gh-pulls-popup))
  :init
  (add-hook 'magit-mode-hook 'turn-on-magit-gh-pulls)
  (setq magit-gh-pulls-arguments (quote ("--open-new-in-browser"))))
#+end_src

*** Expand region
#+begin_src emacs-lisp
(use-package expand-region
  :bind ("C-=" . er/expand-region))
#+end_src

*** ~ace-jump-mode~ / ~ace-mc~
#+begin_src emacs-lisp
(use-package ace-jump-mode
  :bind
  ("C-0" . ace-jump-mode))

(use-package ace-mc
  :bind
  ("C-)" . ace-mc-add-multiple-cursors))
#+end_src

*** ~json-mode~
#+begin_src emacs-lisp
(use-package json-mode)
#+end_src

*** Aggressive indent
#+begin_src emacs-lisp
(use-package aggressive-indent
  :config
  (global-aggressive-indent-mode 1))
#+end_src

*** Docker Integration
#+begin_src emacs-lisp
(use-package dockerfile-mode
  :init
  (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))

(use-package docker-tramp)
(use-package docker)
#+end_src

*** Ivy/Counsel/avy
#+begin_src emacs-lisp
(use-package counsel
  :bind
  ("M-y" . counsel-yank-pop))
(use-package ivy
  :init
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "")
  (setq ivy-use-virtual-buffers t)
  (setq ivy-initial-inputs-alist nil)
  :bind
  ("C-s" . swiper)
  ("M-x" . counsel-M-x)
  ("C-x C-f" . counsel-find-file)
  :config
  (ivy-mode 1))
(use-package avy
  :ensure nil
  :bind
  ("C-:" . avy-goto-char)
  ("C-'" . avy-goto-char-2)
  ("M-g g" . avy-goto-line))
#+end_src

*** Corral
#+begin_src emacs-lisp
(use-package corral
  :bind
  ("M-9" . corral-parentheses-backward)
  ("M-0" . corral-parentheses-forward)
  ("M-[" . corral-brackets-backward)
  ("M-]" . corral-brackets-forward)
  ("M-{" . corral-braces-backward)
  ("M-}" . corral-braces-forward)
  ("M-\"" . corral-double-quotes-backward)
  ("C-c v" . hydra-corral/body)
  :config
  (setq corral-preserve-point t)
  (defhydra hydra-corral (:columns 5)
    "Corral"
    ("(" corral-parentheses-backward "Back")
    (")" corral-parentheses-forward "Forward")
    ("[" corral-brackets-backward "Back")
    ("]" corral-brackets-forward "Forward")
    ("{" corral-braces-backward "Back")
    ("}" corral-braces-forward "Forward")
    ("\"" corral-double-quotes-backward "Back")
    ("." hydra-repeat "Repeat")))
#+end_src
*** Hydras
#+begin_src emacs-lisp
(use-package hydra
  :bind
  ("C-c z" . hydra-zoom/body)
  ("C-c t" . hydra-move-text/body)

  :config
  ;; Zoom
  (defhydra hydra-zoom ()
    "Zoom"
    ("i" text-scale-increase "in")
    ("o" text-scale-decrease "out")))

  ;; Move Text
  (defhydra hydra-move-text ()
    "Move text"
    ("p" move-text-up "up")
    ("n" move-text-down "down"))
#+end_src
*** Perspective
#+begin_src emacs-lisp
(use-package perspective
  :init
  (persp-mode)
  :config
  (custom-set-faces
  '(persp-selected-face ((t (:foreground "#83A598" :weight bold))))))

(use-package persp-projectile
  :config
  (require 'persp-projectile))
#+end_src

* Deactivation
#+begin_src emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
(setq inhibit-startup-message t)
(setq ring-bell-function 'ignore)
#+end_src

* Custom functions
*** Sort words
#+begin_src emacs-lisp
(defun sort-words (reverse beg end)
  "Sort words in region alphabetically, in REVERSE if negative.
    Prefixed with negative \\[universal-argument], sorts in reverse.
  
    The variable `sort-fold-case' determines whether alphabetic case
    affects the sort order.
  
    See `sort-regexp-fields'."
  (interactive "*P\nr")
  (sort-regexp-fields reverse "\\w+" "\\&" beg end))
#+end_src

*** Sensible beginning of line
#+begin_src emacs-lisp
(defun sensible-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

(global-set-key [remap move-beginning-of-line]
                'sensible-move-beginning-of-line)
#+end_src

*** Move text
#+begin_src emacs-lisp
(use-package move-text)
#+end_src
* Appearance
** Hide stuff
#+begin_src emacs-lisp
(blink-cursor-mode 0)
(when window-system
  (tooltip-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1))
#+end_src

** Clock
#+begin_src emacs-lisp
(setq display-time-format "%H:%M %a %d %b ")
(setq display-time-default-load-average nil)
(display-time-mode 1)
#+end_src

** Fringes
#+begin_src emacs-lisp
(fringe-mode '(4 . 0))

(defun hide-fringes ()
  (set-window-fringes (selected-window) 0 0))

(add-hook 'eshell-mode 'hide-fringes)
(custom-set-faces
  '(fringe ((t (:background "#504945")))))
#+end_src

** Current line highlighting
#+begin_src emacs-lisp
(global-hl-line-mode t)
#+end_src

Disable ~hl-line-mode~ for specific modes/buffers
#+begin_src emacs-lisp
(make-variable-buffer-local 'global-hl-line-mode)
(defvar my-ghd-modes '(
                       shell-mode-hook
                       git-commit-mode-hook
                       term-mode-hook
                      )
  "Modes to ensure global-hl-line-mode is disabled for.")
(dolist (m my-ghd-modes)
  (add-hook m (lambda () (setq global-hl-line-mode nil))))
#+end_src

** Indent guides
#+begin_src emacs-lisp
(use-package indent-guide
  :config
  (defvar my-indent-modes '(
                            yaml-mode-hook
                            python-mode-hook
                            js2-mode-hook
                            go-mode-hook
                            ruby-mode-hook
                            emacs-lisp-mode-hook
                            common-lisp-mode-hook
                            lisp-interaction-mode-hook
                        )
    "Modes to ensure indent-guide-mode is enabled for.")
  (dolist (m my-indent-modes)
      (add-hook m 'indent-guide-mode)))
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :config
  (defvar my-rainbow-modes '(
                            yaml-mode-hook
                            python-mode-hook
                            js2-mode-hook
                            go-mode-hook
                            ruby-mode-hook
                            emacs-lisp-mode-hook
                            common-lisp-mode-hook
                            lisp-interaction-mode-hook
                        )
    "Modes to ensure rainbow-delimiters-mode is enabled for.")
  (dolist (m my-rainbow-modes)
      (add-hook m 'rainbow-delimiters-mode)))
#+end_src

** All the icons
#+begin_src emacs-lisp
(use-package all-the-icons)
(use-package all-the-icons-dired
  :init
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
  :config
  (custom-set-faces
  '(all-the-icons-dired-dir-face ((t (:foreground "#FDF4C1"))))))
#+end_src
** Theme
#+begin_src emacs-lisp
(use-package darktooth-theme
  :init
  (load-theme 'darktooth t))
#+end_src

** Font
*** Use [[https://github.com/tonsky/FiraCode][Fira Code]] as the default font
#+begin_src emacs-lisp
 (when (window-system)
   (set-default-font "Fira Code"))
#+end_src

*** Configure ligatures
#+begin_src emacs-lisp
(let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
               (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
               (36 . ".\\(?:>\\)")
               (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
               (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
               (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
               (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
               (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
               (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
               (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
               (48 . ".\\(?:x[a-zA-Z]\\)")
               (58 . ".\\(?:::\\|[:=]\\)")
               (59 . ".\\(?:;;\\|;\\)")
               (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
               (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
               (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
               (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
               (91 . ".\\(?:]\\)")
               (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
               (94 . ".\\(?:=\\)")
               (119 . ".\\(?:ww\\)")
               (123 . ".\\(?:-\\)")
               (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
               (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
               )
             ))
  (dolist (char-regexp alist)
    (set-char-table-range composition-function-table (car char-regexp)
                          `([,(cdr char-regexp) 0 font-shape-gstring]))))
#+end_src

** Custom modeline
#+begin_src emacs-lisp
(defun shorten-directory (dir max-length)
  "Show up to `max-length' characters of a directory name `dir'."
  (let ((path (reverse (split-string (abbreviate-file-name dir) "/")))
        (output ""))
    (when (and path (equal "" (car path)))
      (setq path (cdr path)))
    (while (and path (< (length output) (- max-length 4)))
      (setq output (concat (car path) "/" output))
      (setq path (cdr path)))
    (when path
      (setq output (concat ".../" output)))
    output))

(setq-default mode-line-format
              (quote
               ("   "
                ;; mode
		(:propertize (:eval (shorten-directory default-directory 10))
			     'face 'mode-line-folder-face)
		(:propertize "%b"
			     'face 'mode-line-filename-face)
		" "
                (:propertize mode-line-modified 'face 'mode-line-modified-face)
		"  "
		(vc-mode vc-mode)
		"  "
                ;; 'mode-name'
                (:propertize "%m" 'face 'mode-line-mode-name)
                "    "
                ;; line number
                "Line %l, %p    "
	       (:propertize global-mode-string 'face 'mode-line-mode-string))))
#+end_src

* Misc Language Config
#+begin_src emacs-lisp
(use-package go-mode
  :config
  (add-to-list 'exec-path "~/code/go/bin")
  (add-hook 'before-save-hook 'gofmt-before-save)
  (setenv "GOPATH" "/Users/cmacrae/code/go"))

(use-package markdown-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode)))
  (add-hook 'markdown-mode-hook 'flyspell-mode)

(use-package jinja2-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.j2\\'" . jinja2-mode)))

(use-package js2-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))

(use-package hcl-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.nomad\\'" . hcl-mode)))

(use-package terraform-mode)
#+end_src

* Org Config
** General
#+begin_src emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(setq org-return-follows-link t)
(setq org-agenda-files '("~/org"))
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
	 "* TODO %^{Brief Description} %^g\n%?\tAdded: %U")
	("r" "ToRead" entry (file+headline "~/org/gtd.org" "Tasks")
	 "* TOREAD %^{Title} %^g\n%?\tLink: %c")
	("p" "Project" entry (file+headline "~/org/gtd.org" "Projects")
	 "* %^{Brief Description} %^g\n%?\tAdded: %U")
	("m" "Maybe" entry (file+headline "~/org/gtd.org" "Maybe/Some Day")
	 "* %^{Brief Description} %^g\n%?\tAdded: %U")))
#+end_src

** ~org-page~
#+begin_src emacs-lisp
(use-package org-page
  :config
  (setq op/repository-directory "~/code/git/blog")
  (setq op/theme-root-directory "~/Documents/blog/themes")
  (setq op/theme 'cmacrae)
  (setq op/site-domain "http://cmacr.ae")
  (setq op/site-main-title "Calum MacRae")
  (setq op/site-sub-title "/home/cmacrae")
  (setq op/personal-disqus-shortname "cmacrae")
  (setq op/personal-github-link "https://github.com/cmacrae"))
#+end_src

** ~org-bullets~
#+begin_src emacs-lisp
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

